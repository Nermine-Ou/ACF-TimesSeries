# -*- coding: utf-8 -*-
"""ACF-TS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vKwDbN8pUZ58lSYV_Qb8VW0UUtsrnjyO
"""

# Generate a time series with only noise
residuals_only = np.random.normal(0, 1, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(residuals_only)
plt.title("Time Series with Only Residuals")

# Plot the ACF
plt.subplot(212)
plot_acf(residuals_only, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Only Residuals")
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf

# Generate a time series with a linear trend
np.random.seed(123)
n = 100
trend_only = np.arange(1, n+1) + np.random.normal(0, 10, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(trend_only)
plt.title("Time Series with Only Trend")

# Plot the ACF
plt.subplot(212)
plot_acf(trend_only, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Only Trend")
plt.tight_layout()
plt.show()

# Generate a time series with trend and noise
trend_noise = np.arange(1, n+1) + np.random.normal(0, 10, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(trend_noise)
plt.title("Time Series with Trend and Noise")

# Plot the ACF
plt.subplot(212)
plot_acf(trend_noise, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Trend and Noise")
plt.tight_layout()
plt.show()

# Generate a time series with seasonality
seasonality_only = np.sin(2 * np.pi * np.arange(1, n+1) / 12) + np.random.normal(0, 0.1, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(seasonality_only)
plt.title("Time Series with Only Seasonality")

# Plot the ACF
plt.subplot(212)
plot_acf(seasonality_only, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Only Seasonality")
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf

# Generate a time series with seasonality and noise
np.random.seed(123)
n = 100
seasonality_noise = np.sin(2 * np.pi * np.arange(1, n+1) / 12) + np.random.normal(0, 0.5, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(seasonality_noise)
plt.title("Time Series with Seasonality and Noise")

# Plot the ACF
plt.subplot(212)
plot_acf(seasonality_noise, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Seasonality and Noise")
plt.tight_layout()
plt.show()

# Generate a time series with both trend and seasonality
trend_seasonality = np.arange(1, n+1) + np.sin(2 * np.pi * np.arange(1, n+1) / 12) + np.random.normal(0, 10, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(trend_seasonality)
plt.title("Time Series with Both Trend and Seasonality")

# Plot the ACF
plt.subplot(212)
plot_acf(trend_seasonality, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Both Trend and Seasonality")
plt.tight_layout()
plt.show()

# Generate a time series with trend, seasonality, and noise
trend_seasonality_noise = np.arange(1, n+1) + np.sin(2 * np.pi * np.arange(1, n+1) / 12) + np.random.normal(0, 10, n)

# Plot the time series
plt.figure(figsize=(12, 6))
plt.subplot(211)
plt.plot(trend_seasonality_noise)
plt.title("Time Series with Trend, Seasonality, and Noise")

# Plot the ACF
plt.subplot(212)
plot_acf(trend_seasonality_noise, lags=30, ax=plt.gca())
plt.title("ACF of Time Series with Trend, Seasonality, and Noise")
plt.tight_layout()
plt.show()

